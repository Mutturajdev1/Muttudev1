--QUestions : 
--Design an Oracle database schema for an e-commerce website, ensuring data integrity, scalability, and efficient query performance

--Assumptions : Creating DB Schema for new E commerse website:

--Step1 : Need to create Schema by below code and Password in DB

Step2 : Create list of tables to be created as per the E-Commerse Requirement Application : (If want we can create ER diagram For same and finalyze the columns and Referencial intigrity)
--These are major tables involve in the E-commerse app.
1 . USERS
2 . PRODUCTS 
3 . CATEGORIES
4 . ORDERS
5 . ORDERED_ITEMS
6 . PAYMENT TYPES
8 . PAYMENTS
7 . INVENTORY

--Step3 : We can create the table with proper datatypes and integrity Constraint as below :

1 . USERS --Users are End users or Customers purchose products

CREATE TABLE USERS (
    user_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ---We can create Sequence for unique Id genearation for Users as Primary key Constraint
    username      VARCHAR2(50) UNIQUE NOT NULL,  --Username should be unique for each user and Not null
    email         VARCHAR2(100) UNIQUE NOT NULL,--If user has Email or we can use it as username if want.It should be unique and not null 
    password 	  VARCHAR2(100) NOT NULL, --it should be not be null, it should be encrypted or masked for security
    created_date    DATE DEFAULT SYSDATE, --Creation Date
	update_date  DATE DEFAULT SYSDATE,--Updated Date
    is_active     CHAR(1) CHECK (is_active IN ('Y','N'))--Identify Active and inActive Users
);


2 . CATEGORIES --Products are categorised in deferent categories

CREATE TABLE CATEGORIES (
    category_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,--We can create Sequence for unique Id genearation for  each CATEGORIES
    category_name VARCHAR2(100) NOT NULL, --category name should not be null
	created_date    DATE DEFAULT SYSDATE --Creation Date
	update_date  DATE DEFAULT SYSDATE--Updated Date
);


3 . PRODUCTS  --List of Products for Saling

CREATE TABLE PRODUCTS (
    product_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,---We can create Sequence for unique Id genearation for  each Products
    product_name    VARCHAR2(150) NOT NULL, --Product Name and should not be null
    description     CLOB, --If Product Specification and desciption is more, so used CLOb dat type 
    price           NUMBER(10, 2) NOT NULL, -- Price must not be Null for each Product
    category_id     NUMBER NOT NULL, --we can devide the products into deferent Catogories
    created_date      DATE DEFAULT SYSDATE,--Creation Date
	update_date  DATE DEFAULT SYSDATE,--Updated Date
    is_active       CHAR(1) CHECK (is_active IN ('Y','N')),--Identify Active and inActive Products
    FOREIGN KEY (category_id) REFERENCES categories(category_id) --Foriegn key Constraint Added for category_id 
);


4. INVENTORY --Maintain Stock of the Products

CREATE TABLE INVENTORY (
    Inveory_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,--We can create Sequence for unique Id genearation for  Inveory_id
	product_id   NUMBER UNIQUE KEY,---product_id refered from PRODUCTS table to maintain the inventory
    stock_qty    NUMBER NOT NULL, --How stock present in inventory of perticuler Product 
    last_updated DATE DEFAULT SYSDATE,--Date of Quantity updation
	Created_date DATE DEFAULT SYSDATE,--Creation Date
    FOREIGN KEY (product_id) REFERENCES products(product_id) --Foriegn key Constraint Added for product_id 
);


5. ORDERS  --Oreders recieced from the costomers for any product

CREATE TABLE ORDERS (
    order_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,--We can create Sequence for unique Id genearation for order_id
    user_id      NUMBER NOT NULL,--User id should not be null, user must order some produsts
    order_date   DATE DEFAULT SYSDATE,--Main Ordered Date
    status       VARCHAR2(20) CHECK (status IN ('Pending','Shipped','Delivered','Cancelled')),--These are the statuses for the Orders, it will change as Order moves till shipment
    total_amount NUMBER(10, 2),--Total Amount orderd
	update_date  DATE DEFAULT SYSDATE,--Updated Date
    FOREIGN KEY (user_id) REFERENCES users(user_id)--Referencing user_id from Users table for orders placement
);


6. ORDERED_ITEMS  -- Deatails of the Order items and 

CREATE TABLE ORDERED_ITEMS (
    ordered_item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,--We can create Sequence for unique Id genearation for order_item_id
    order_id      NUMBER NOT NULL, --Order id from Orders table
    product_id    NUMBER NOT NULL, --product_id id from Products table
    quantity      NUMBER NOT NULL,-- Quantity of the Items ordered
    unit_price    NUMBER(10, 2) NOT NULL,--Price of the Each Item and it should not be null
	Created_date DATE DEFAULT SYSDATE,--Creation Date
	Update_date   DATE DEFAULT SYSDATE,--Updated Date
    FOREIGN KEY (order_id) REFERENCES orders(order_id),--Referencing order_id from orders table
    FOREIGN KEY (product_id) REFERENCES products(product_id)--Referencing product_id from products table 
);


7. PAYMENTS --Details of payment for Ordes
CREATE TABLE PAYMENTS (
    payment_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,--We can create Sequence for unique Id genearation for payment_id
    order_id      NUMBER NOT NULL, --Payments for Orders
    amount   NUMBER(10, 2), --Amount paid
    payment_date  DATE DEFAULT SYSDATE,--Date of Payment
    payment_mode  VARCHAR2(20) NOT NULL---payment_mode
    status        VARCHAR2(20) CHECK (status IN ('Success','Failed','Pending')),--Payment Status
	Created_date DATE DEFAULT SYSDATE,--Creation Date
	Update_date   DATE DEFAULT SYSDATE,--Updated Date
    FOREIGN KEY (order_id) REFERENCES orders(order_id), --Referencing order_id from orders table
	FOREIGN KEY (order_id) REFERENCES PAYMENT_TYPE(payment_mode) --Referencing payment_mode from PAYMENT_TYPE table
);

8 .  PAYMENTS_TYPE -- if we have deferent types of the Payment Methods 
CREATE TABLE PAYMENTS_TYPE (
    payment_type_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,--We can create Sequence for unique Id genearation for payment_type_id
    payment_mode      VARCHAR2(100) UNIQUE KEY, --Payments for Orders.Payments like 'Credit Card', 'UPI', 'COD', 'Wallet'
    status        VARCHAR2(20) CHECK (status IN ('Success','Failed','Pending')),--Payment Status
	Created_date DATE DEFAULT SYSDATE,--Creation Date
	Update_date   DATE DEFAULT SYSDATE,--Updated Date
);





